unit untConexaoExplicito;

interface

uses Windows, Classes, Vcl.Dialogs;

Type
  TFuncCreateConnectionFromIniFile = function(const AstrIniFileName: String): TStringList; stdcall;
  TProcActivateConnections = procedure(AconnectionList: TStringList); stdcall;

var
  FuncCreateConnectionFromIniFile : TFuncCreateConnectionFromIniFile;
  ProcActivateConnections : TProcActivateConnections;

implementation
uses SysUtils;

var
  DLLHandle: THandle;

function GetFunctionPointer(const AstrDLLName, AstrFunctionName: string): Pointer;
begin
  Result := GetProcAddress(DLLHandle, PChar(AstrFunctionName));
  if not Assigned(Result) then
    raise Exception.Create('Função não encontrada na DLL: ' + AstrFunctionName);
end;

function LoadDLLInCurrentDir(const DLLName: string): HMODULE;
var
  DLLPath: string;
begin
  DLLPath := ExtractFilePath(ParamStr(0)) + DLLName;
  Result := LoadLibrary(PChar(DLLPath));
end;

procedure LoadDLLFunctions;
begin
  DLLHandle := LoadDLLInCurrentDir('DatabaseManager.dll');

  if DLLHandle <> 0 then
  begin
    @FuncCreateConnectionFromIniFile := GetFunctionPointer('DatabaseManager.dll', 'fCreateConnectionFromIniFile');
    @ProcActivateConnections := GetFunctionPointer('DatabaseManager.dll', 'pActivateConnections')
  end
  else
    raise Exception.Create('Não foi possível carregar a DLL.');
end;

initialization
  LoadDLLFunctions;

finalization
  if DLLHandle <> 0 then
    FreeLibrary(DLLHandle);


end.

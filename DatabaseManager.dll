library DatabaseManager;

{ Important note about DLL memory management: ShareMem must be the
  first unit in your library's USES clause AND your project's (select
  Project-View Source) USES clause if your DLL exports any procedures or
  functions that pass strings as parameters or function results. This
  applies to all strings passed to and from your DLL--even those that
  are nested in records and classes. ShareMem is the interface unit to
  the BORLNDMM.DLL shared memory manager, which must be deployed along
  with your DLL. To avoid using BORLNDMM.DLL, pass string information
  using PChar or ShortString parameters.

  Important note about VCL usage: when this DLL will be implicitly
  loaded and this DLL uses TWicImage / TImageCollection created in
  any unit initialization section, then Vcl.WicImageInit must be
  included into your library's USES clause. }

uses
  SysUtils,
  Classes,
  IniFiles,
  Winapi.Windows,
  Winapi.Messages,
  System.Variants,
  Vcl.Dialogs,
  Vcl.StdCtrls,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.VCLUI.Wait,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,
  Vcl.Grids,
  Vcl.DBGrids,
  FireDAC.Phys.MySQLDef,
  FireDAC.Phys.MySQL,
  Data.DB,
  Vcl.Controls,
  System.Generics.Collections;

{$R *.res}


// Processa o arquivo.ini Cria o TFDConnection a partir dos parametros passados
// e insere a conexao na TStringList

function fCreateConnectionFromIniFile(const AstrIniFileName: String): TObjectList<TFDConnection>; stdcall;
var
  LIniFile: TIniFile;
  LSectionList: TStringList;
  I: Integer;
  LConnection: TFDConnection;
  LSectionName, LServer, LDatabase, LUserName, LPassword, LPort: string;
  LDllPath: string;
  LDriver: TFDPhysMySQLDriverLink;
begin
  Result := TObjectList<TFDConnection>.Create(True); // Crie uma instância de TObjectList<TFDConnection>
  LIniFile := nil;
  LSectionList := nil;
  LDriver := TFDPhysMySQLDriverLink.Create(nil);
  try
    // Obtenha o caminho da DLL (diretório do arquivo executável)
    LDllPath := ExtractFilePath(ParamStr(0));

    if not FileExists(LDllPath + 'libmysql.dll') then
      raise Exception.Create('libmysql.dll não encontrado, colocar o arquivo na pasta do  executavel');

    LDriver.DriverID := 'MySQL';
    LDriver.VendorLib := LDllPath + 'libmysql.dll';

    if not FileExists(LDllPath + AstrIniFileName) then
      raise Exception.Create('O arquivo INI especificado não existe.');

    LIniFile := TIniFile.Create(LDllPath + AstrIniFileName);
    LSectionList := TStringList.Create;
    LIniFile.ReadSections(LSectionList);

    for I := 0 to LSectionList.Count - 1 do
    begin
      try
        LSectionName := LSectionList[I];
        LServer := LIniFile.ReadString(LSectionName, 'Server', '');
        LDatabase := LIniFile.ReadString(LSectionName, 'DataBase', '');
        LUserName := LIniFile.ReadString(LSectionName, 'UserName', '');
        LPassword := LIniFile.ReadString(LSectionName, 'Password', '');
        LPort := LIniFile.ReadString(LSectionName, 'Port', '');
      except
        ShowMessage('Verifique se as chaves estão corretas na seção ' + LSectionName + ' e teste novamente!');
        FreeAndNil(LSectionList);
        FreeAndNil(LDriver);
      end;

      LConnection := TFDConnection.Create(nil);
      LConnection.Name := 'Connection_' + LSectionName;
      LConnection.DriverName := 'MySQL';
      LConnection.Params.DriverID := 'MySQL';
      LConnection.Params.Database := LDatabase;
      LConnection.Params.UserName := LUserName;
      LConnection.Params.Password := LPassword;
      LConnection.Params.Add('DriverID=' + 'MySQL');
      LConnection.Params.Add('Server=' + LServer);
      LConnection.Params.Add('Port=' + LPort);

      try
        LConnection.Open;
        Result.Add(LConnection); // Adicione a conexão à lista
        ShowMessage('Conexão ' + LSectionName + ' criada com sucesso!');
      except
        on E: Exception do
        begin
          ShowMessage('Não foi possível estabelecer a conexão ' + LSectionName + ': ' + E.Message + 'Ajuste os parâmetros e tente novamente');
          LConnection.Free;
        end;
      end;
    end;
  finally
    FreeAndNil(LIniFile);
    FreeAndNil(LSectionList);
    FreeAndNil(LDriver);
  end;
end;

// Processa a TStringList e atraves de um looping ativa todas as TFDConnection
procedure pActivateConnections(AconnectionList: TStringList); stdcall;
var
  I: Integer;
  LDLLPath : String;
  LDriver : TFDPhysMySQLDriverLink;
begin
  LDllPath := ExtractFilePath(ParamStr(0));

  if not FileExists(LDllPath + 'libmysql.dll') then
      raise Exception.Create('libmysql.dll não encontrado, colocar o arquivo na pasta do  executavel');

  LDriver := TFDPhysMySQLDriverLink.Create(nil);
  LDriver.DriverID := 'MySQL';
  LDriver.VendorLib := LDllPath + 'libmysql.dll';

  for I := 0 to AconnectionList.Count - 1 do
  begin
    if AconnectionList.Objects[I] is TFDConnection then
    begin
      try
        TFDConnection(AconnectionList.Objects[I]).Open;
        ShowMessage('Conexão ' + AconnectionList[I] + ' ativada com sucesso!');
      except
        on E: Exception do
          ShowMessage('Erro ao ativar conexão ' + AconnectionList[I] + ': ' + E.Message);
      end;
    end;
  end;
end;

exports
  fCreateConnectionFromIniFile,
  pActivateConnections;

begin
end.
